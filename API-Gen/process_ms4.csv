imgaug1,arithmetic_operations1,magnitude,2,RppPtr_t,srcPtr1,RppPtr_t,srcPtr2,RppiSize,srcSize,validate_image_size,RppPtr_t,dstPtr,RppHandle_t,rppHandle,/* Implements the Gradient Magnitude Computation on input images and stores the result in destination image.,*param [in] srcPtr1 input image1,*param[in] srcPtr2 input image2 ,*param[in] srcSize dimensions of the images,*param[out] dstPtr output image,*param[in]  rppHandle OpenCL handle
imgaug1,arithmetic_operations1,multiply,2,RppPtr_t,srcPtr1,RppPtr_t,srcPtr2,RppiSize,srcSize,validate_image_size,RppPtr_t,dstPtr,RppHandle_t,rppHandle,/* Computes element wise multiplication between two images and stores it in the destination.,*param [in] srcPtr1 input image1,*param[in] srcPtr2 input image2 ,*param[in] srcSize dimensions of the images,*param[out] dstPtr output image,*param[in]  rppHandle OpenCL handle
imgaug1,arithmetic_operations1,accumulate_squared,1,RppPtr_t,srcPtr,RppiSize,srcSize,validate_image_size,RppHandle_t,rppHandle,/* Computes the squared accumulation of the image and stores it in the same.,*param [in/out] input image,*param[in] dimensions of the images,*param[in]  rppHandle OpenCL handle
imgaug1,arithmetic_operations1,mean_stddev,1,RppPtr_t,srcPtr,RppiSize,srcSize,validate_image_size,Rpp32f*,mean,Rpp32f*,stdDev,RppHandle_t,rppHandle,/* Computes the mean pixel value and the standard deviation of the pixels in the input image.,*param [in] input image,*param[in] dimensions of the images,*param[out] mean mean of the pixel values in the input image,*param[out] stddev standard deviation of the pixels values in the input image ,*param[in]  rppHandle OpenCL handle
imgaug1,filter_operations1,box_filter,1,RppPtr_t,srcPtr,RppiSize,srcSize,validate_image_size,RppPtr_t,dstPtr,Rpp32u,kernelSize,RppHandle_t,rppHandle,/* Computes a Box filter over a window of the input image.,*param [in] srcPtr input image,*param[in]  srcSize dimensions of the images,*param[out] dstPtr output image,*param[[in] kernelSize size of the kernel,*param[in]  rppHandle OpenCL handle
imgaug1,filter_operations1,sobel_filter,1,RppPtr_t,srcPtr,RppiSize,srcSize,validate_image_size,RppPtr_t,dstPtr,Rpp32u,sobelType,validate_unsigned_int_range,0,2,RppHandle_t,rppHandle,/* Implements the Sobel Image Filter Kernel.,*param [in] srcPtr input image,*param[in]  srcSize dimensions of the images,*param[out] dstPtr output image,*param[in] sobelType ,*param[in]  rppHandle OpenCL handle
imgaug1,filter_operations1,non_max_suppression,1,RppPtr_t,srcPtr,RppiSize,srcSize,validate_image_size,RppPtr_t,dstPtr,Rpp32u,kernelSize,RppHandle_t,rppHandle,/*This function uses a N x N box around the output pixel used to determine value. If the centre pixel is the maximum it will be retained else it will be replaced with zero.,*param [in] srcPtr input image,*param[in]  srcSize dimensions of the images,*param[out] dstPtr output image,*param[in] kernelSize size of the kernel,*param[in]  rppHandle OpenCL handle
imgaug1,color_model_convertions1,channel_extract,1,RppPtr_t,srcPtr,RppiSize,srcSize,validate_image_size,RppPtr_t,dstPtr,Rpp32u,extractChannelNumber,validate_unsigned_int_range,0,2,RppHandle_t,rppHandle,/* Extract a single channel from given RGB image and stores it in destination grey scale image. ,/*param [in] srcPtr input image,*param[in]  srcSize dimensions of the images,*param[out] dstPtr Output image,*param[in] extractChannelNumber The channel to be extracted and it could be,*0---> R channel, *1---> G channel,*2---> B channel,*param[in]  rppHandle OpenCL handle
imgaug1,color_model_convertions1,channel_combine,3,RppPtr_t,srcPtr1,RppPtr_t,srcPtr2,RppPtr_t,srcPtr3,RppiSize,srcSize,validate_image_size,RppPtr_t,dstPtr,RppHandle_t,rppHandle,/* Combines 3 greyscale images to produce a single RGB image. ,/*param [in] srcPtr1 Input image1,*param [in] srcPtr2 Input image2,*param [in] srcPtr3 Input image3,*param[in]  srcSize dimensions of the images,*param[out] dstPtr Output image,*param[in]  rppHandle OpenCL handle
imgaug1,morphological_transforms1,dilate,1,RppPtr_t,srcPtr,RppiSize,srcSize,validate_image_size,RppPtr_t,dstPtr,Rpp32u,kernelSize,RppHandle_t,rppHandle,/* This function uses a N x N box around the output pixel used to determine value.,dest(x,y) = max(xi,yi),x-bound < xi < x+bound and x-bound < xi < x+bound,bound = (kernelsize + 1) / 2,*param [in] srcPtr input image,*param[in]  srcSize dimensions of the images,*param[out] dstPtr output image,*param[in] kernelSize dimension of the kernel,*param[in]  rppHandle OpenCL handle
imgaug1,morphological_transforms1,erode,1,RppPtr_t,srcPtr,RppiSize,srcSize,validate_image_size,RppPtr_t,dstPtr,Rpp32u,kernelSize,RppHandle_t,rppHandle,/* This function uses a N x N box around the output pixel used to determine value.,dest(x,y) = min(xi,yi),x-bound < xi < x+bound and x-bound < xi < x+bound,bound = (kernelsize + 1) / 2,*param [in] srcPtr input image,*param[in]  srcSize dimensions of the images,*param[out] dstPtr output image,*param[in] kernelSize dimension of the kernel,*param[in]  rppHandle OpenCL handle
imgaug1,computer_vision1,local_binary_pattern,1,RppPtr_t,srcPtr,RppiSize,srcSize,validate_image_size,RppPtr_t,dstPtr,RppHandle_t,rppHandle,/*Extracts LBP image from an input image and stores it in the output image., Local binary pattern is defined as: Each pixel (y,x) generate an 8 bit value describing the local binary pattern around the pixel, by comparing the pixel value with its 8 neighbours (selected neighbours of the 3x3 or 5x5 window).,*param [in] srcPtr input image,*param[in]  srcSize dimensions of the images,*param[out] dstPtr output image,*param[in]  rppHandle OpenCL handle
imgaug1,statistical_operations1,min,2,RppPtr_t,srcPtr1,RppPtr_t,srcPtr2,RppiSize,srcSize,validate_image_size,RppPtr_t,dstPtr,RppHandle_t,rppHandle,/* Computes pixel wise minimum on input images and stores the result in destination image.,*param [in] srcPtr1 input image1,*param[in] srcPtr2 input image2 ,*param[in] srcSize dimensions of the images,*param[out] dstPtr output image,*param[in]  rppHandle OpenCL handle
imgaug1,statistical_operations1,max,2,RppPtr_t,srcPtr1,RppPtr_t,srcPtr2,RppiSize,srcSize,validate_image_size,RppPtr_t,dstPtr,RppHandle_t,rppHandle,/* Computes pixel wise maximum on input images and stores the result in destination image.,*param [in] srcPtr1 input image1,*param[in] srcPtr2 input image2 ,*param[in] srcSize dimensions of the images,*param[out] dstPtr output image,*param[in]  rppHandle OpenCL handle
imgaug1,arithmetic_operations1,phase,2,RppPtr_t,srcPtr1,RppPtr_t,srcPtr2,RppiSize,srcSize,validate_image_size,RppPtr_t,dstPtr,RppHandle_t,rppHandle,/* Implements the Gradient Phase Computation phase on input images and stores the result in destination image.,*param [in] srcPtr1 input image1,*param[in] srcPtr2 input image2 ,*param[in] srcSize dimensions of the images,*param[out] dstPtr output image,*param[in]  rppHandle OpenCL handle
imgaug1,filter_operations1,median_filter,1,RppPtr_t,srcPtr,RppiSize,srcSize,validate_image_size,RppPtr_t,dstPtr,Rpp32u,kernelSize,RppHandle_t,rppHandle,/* This function uses a N x N box around the output pixel used to determine value.,dest(x,y) = median(xi,yi),x-bound < xi < x+bound and x-bound < xi < x+bound,bound = (kernelsize + 1) / 2,*param [in] srcPtr input image,*param[in]  srcSize dimensions of the images,*param[out] dstPtr output image,*param[in] kernelSize dimension of the kernel,*param[in]  rppHandle OpenCL handle
imgaug1,geometry_transforms1,scale,1,RppPtr_t,srcPtr,RppiSize,srcSize,validate_image_size,RppPtr_t,dstPtr,RppiSize,dstSize,validate_image_size,Rpp32f,percentage,RppHandle_t,rppHandle,/* Scales the input image according to the percentage given by the user.,*param [in] input image,*param[in] dimensions of the images,*param[out] output image where resized image is stored,*param[in] dimensions of the output images,*param[in] percentage Percentage to which the input image needs to be scaled,param[in]  rppHandle OpenCL handle
imgaug1,computer_vision1,data_object_copy,1,RppPtr_t,srcPtr,RppiSize,srcSize,validate_image_size,RppPtr_t,dstPtr,RppHandle_t,rppHandle,/* Performs a deep copy from the input image to the output image.,*param [in] srcPtr input image,*param[in]  srcSize dimensions of the images,*param[out] dstPtr output image,*param[in]  rppHandle OpenCL handle
imgaug1,filter_operations1,custom_convolution,1,RppPtr_t,srcPtr,RppiSize,srcSize,validate_image_size,RppPtr_t,dstPtr,RppiSize,kernelSize,RppHandle_t,rppHandle,/* Applies a N x M convolution on every input pixel and stores it in the destination.,*param [in] srcPtr input image,*param[in]  srcSize dimensions of the images,*param[out] dstPtr output image,*param[in] kernelSize dimension of the kernel,*param[in]  rppHandle OpenCL handle
imgaug1,statistical_operations1,histogram,1,RppPtr_t,srcPtr,RppiSize,srcSize,validate_image_size,Rpp32u*,outputHistogram,Rpp32u,bins,validate_unsigned_int_range,1,256,RppHandle_t,rppHandle,/* Computes the histogram of image and stores it in the histogram array of size bins.,*param [in] srcPtr input image,*param[in] srcSize dimensions of the images,*param[out] outputHistogram pointer to store the histogram of the input image,*param[in] bins size of output histogram ,*param[in]  rppHandle OpenCL handle
imgaug1,color_model_convertions1,look_up_table,1,RppPtr_t,srcPtr,RppiSize,srcSize,validate_image_size,RppPtr_t,dstPtr,Rpp8u*,lutPtr,RppHandle_t,rppHandle,/* This function uses each pixel in an image to index into a LUT and put the indexed LUT value into the output image.,*param [in] srcPtr input image,*param[in]  srcSize dimensions of the images,*param[out] dstPtr output image,*param[in] lutPtr contains the input look up table values,*param[in]  rppHandle OpenCL handle
imgaug1,statistical_operations1,min_max_loc,1,RppPtr_t,srcPtr,RppiSize,srcSize,validate_image_size,Rpp8u*,min,Rpp8u*,max,Rpp32u*,minLoc,Rpp32u*,maxLoc,RppHandle_t,rppHandle,/* This function finds the minimum and maximum values and its corresponding location and stores it in the output variables.,*param [in] srcPtr input image,*param[in]  srcSize dimensions of the images,*param[out] min minimum pixel value in the input image, *param[out] max maximum pixel value in the input image, *param[out] minLoc minimum pixel's index in the input image, *param[out] max maximum pixel's index in the input image,*param[in]  rppHandle OpenCL handle 
imgaug1,computer_vision1,gaussian_image_pyramid,1,RppPtr_t,srcPtr,RppiSize,srcSize,validate_image_size,RppPtr_t,dstPtr,Rpp32f,stdDev,validate_float_min,0,Rpp32u,kernelSize,RppHandle_t,rppHandle,/* Computes a Gaussian Image Pyramid from an input image and stores it in the destination image.,*param [in] srcPtr input image,*param[in]  srcSize dimensions of the images,*param[out] dstPtr output image,*param[in] kernel ,*param[in] stdDev standard deviation value to populate gaussian kernel,*param[in] kernelSize size of the kernel,*param[in]  rppHandle OpenCL handle
imgaug1,computer_vision1,laplacian_image_pyramid,1,RppPtr_t,srcPtr,RppiSize,srcSize,validate_image_size,RppPtr_t,dstPtr,Rpp32f,stdDev,validate_float_min,0,Rpp32u,kernelSize,RppHandle_t,rppHandle,/* Computes a laplacian Image Pyramid from an input image and stores it in the destination image.,*param [in] srcPtr input image,*param[in]  srcSize dimensions of the images,*param[out] dstPtr output image,*param[in] kernel ,*param[in] stdDev standard deviation value to populate gaussian kernel,*param[in] kernelSize size of the kernel,*param[in]  rppHandle OpenCL handle
imgaug1,filter_operations1,gaussian_filter,1,RppPtr_t,srcPtr,RppiSize,srcSize,validate_image_size,RppPtr_t,dstPtr,Rpp32f,stdDev,validate_float_min,0,Rpp32u,kernelSize,RppHandle_t,rppHandle,/* Applies gaussian filter over every pixel in the input image and stores it in the destination image.,*param [in] srcPtr input image,*param[in]  srcSize dimensions of the images,*param[out] dstPtr output image,*param[in] kernel ,*param[in] stdDev standard deviation value to populate gaussian kernel,*param[in] kernelSize size of the kernel,*param[in]  rppHandle OpenCL handle
imgaug1,image_augmentations1,histogram_equalize,1,RppPtr_t,srcPtr,RppiSize,srcSize,validate_image_size,RppPtr_t,dstPtr,RppHandle_t,rppHandle,/* Does histogram equalization on the input image.,*param [in] srcPtr input image,*param[in]  srcSize dimensions of the images,*param[out] dstPtr output image,*param[in]  rppHandle OpenCL handle	
