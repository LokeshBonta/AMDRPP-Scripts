imgaug1,color_model_convertions1,color_temperature,1,RppPtr_t,srcPtr,RppiSize,srcSize,validate_image_size,RppPtr_t,dstPtr,Rpp32s,adjustmentValue,validate_int_range,-100,100,RppHandle_t,rppHandle,/* Changes color temperature of an image.,*param [in] srcPtr input image,*param[in]  srcSize dimensions of the images,*param[out] dstPtr output image,*param[in] adjustmentValue adjustment value used in color temperature correction which should range between -100 - 100,*param[in] OpenCL handle
imgaug1,color_model_convertions1,vignette,1,RppPtr_t,srcPtr,RppiSize,srcSize,validate_image_size,RppPtr_t,dstPtr,Rpp32f,stdDev,validate_float_range,0,100,RppHandle_t,rppHandle,/* Introduces vignette effect in the entire image.,*param [in] srcPtr input image,*param[in]  srcSize dimensions of the images,*param[out] dstPtr output image,*param[in] stdDev standard deviation for the gaussian function used in the vignette (decides amount of vignette) which should range between 0 - 100,*param[in] OpenCL handle
imgaug1,geometry_transforms1,fisheye,1,RppPtr_t,srcPtr,RppiSize,srcSize,validate_image_size,RppPtr_t,dstPtr,RppHandle_t,rppHandle,/* Add fish eye effect in the entire image.,*param [in] srcPtr input image,*param[in]  srcSize dimensions of the images,*param[out] dstPtr output image,*param[in] OpenCL handle
imgaug1,geometry_transforms1,lens_correction,1,RppPtr_t,srcPtr,RppiSize,srcSize,validate_image_size,RppPtr_t,dstPtr,Rpp32f,strength,validate_float_min,0,Rpp32f,zoom,validate_float_min,1,RppHandle_t,rppHandle,/* Does lens correction in the lens distorted images.,*param [in/out] srcPtr input image,*param[in]  srcSize dimensions of the images,*param[out] dstPtr output image,*param[in] strength strength of lens correction needed which should be greater than 0,*param[in] zoom extent to which zoom-out is needed which should be greater than 1,*param[in] OpenCL handle
imgaug1,image_augmentations1,fog,1,RppPtr_t,srcPtr,RppiSize,srcSize,validate_image_size,RppPtr_t,dstPtr,Rpp32f,fogValue,validate_float_range,0,1,RppHandle_t,rppHandle,/* Introduces foggy effect in the entire image.,*param [in] srcPtr input image,*param[in]  srcSize dimensions of the images,*param[out] dstPtr output image,*param[in] fogValue float value to decide the amount of foggy effect to be added which should range between 0 - 1,*param[in] OpenCL handle
imgaug1,image_augmentations1,rain,1,RppPtr_t,srcPtr,RppiSize,srcSize,validate_image_size,RppPtr_t,dstPtr,Rpp32f,rainValue,validate_float_range,0,1,Rpp32u,rainWidth,Rpp32u,rainHeight,RppHandle_t,rppHandle,/* Introduces rainy effect in the entire image.,*param [in] srcPtr input image,*param[in]  srcSize dimensions of the images,*param[out] dstPtr output image,*param[in] rainValue float value to decide the amount of rainy effect to be added which should range between 0 - 1,*param[in] rainWidth width of the rain line,*param[in] rainHeight height of the rain line,*param[in] OpenCL handle
imgaug1,image_augmentations1,snow,1,RppPtr_t,srcPtr,RppiSize,srcSize,validate_image_size,RppPtr_t,dstPtr,Rpp32f,snowValue,validate_float_range,0,1,RppHandle_t,rppHandle,/* Introduces snowy effect in the entire image.,*param [in] srcPtr input image,*param[in]  srcSize dimensions of the images,*param[out] dstPtr output image,*param[in] snowValue float value to decide the amount of snowy effect to be added which should range between 0 - 1,*param[in] OpenCL handle
imgaug1,image_augmentations1,random_shadow,1,RppPtr_t,srcPtr,RppiSize,srcSize,validate_image_size,RppPtr_t,dstPtr,Rpp32u,x1,validate_int_range,0,srcSize.width - 1,Rpp32u,y1,validate_int_range,0,srcSize.height - 1,Rpp32u,x2,validate_int_range,0,srcSize.width - 1,Rpp32u,y2,validate_int_range,0,srcSize.height - 1,Rpp32u,numberOfShadows,validate_int_min,1,Rpp32u,maxSizeX,Rpp32u,maxSizeY,RppHandle_t,rppHandle,/* Adds multiple random shadows [rectangle shaped shadows] in the image to the roi area.,*param [in] srcPtr input image,*param[in]  srcSize dimensions of the images,*param[out] dstPtr output image,*param[in] x1 value of roi,*param[in] y1 value of roi, *param[in] x2 value of roi, *param[in]y2 value of roi,*param[in] numberOfShadows number of shadows to be added in the roi region,*param[in] maxSizeX shadow's maximum width,*param[in] maxSizeY shadow's maximum height,*param[in] OpenCL handle
imgaug1,image_augmentations1,blend,2,RppPtr_t,srcPtr1,RppPtr_t,srcPtr2,RppiSize,srcSize,validate_image_size,RppPtr_t,dstPtr,Rpp32f,alpha,validate_float_range,0,1,RppHandle_t,rppHandle,/* Blends two source image and stores it in destination image.,*param [in] srcPtr1 input image1,*param[in] srcPtr2 input image2 ,*param[in]  srcSize dimensions of the images,*param[out] dstPtr output image,*param[in] alpha transperancy factor of the images where alpha is for image1 and 1-alpha is for image2,param[in] OpenCL handle
imgaug1,image_augmentations1,pixelate,1,RppPtr_t,srcPtr,RppiSize,srcSize,validate_image_size,RppPtr_t,dstPtr,Rpp32u,x1,validate_int_range,0,srcSize.width - 1,Rpp32u,y1,validate_int_range,0,srcSize.height - 1,Rpp32u,x2,validate_int_range,0,srcSize.width - 1,Rpp32u,y2,validate_int_range,0,srcSize.height - 1,RppHandle_t,rppHandle,/* pixelates the roi region of the image  ,*param [in] srcPtr1 input image,*param[in]  srcSize dimensions of the images,*param[out] dstPtr output image,*param[in] x1 x1 value of roi,*param[in] y1 y1 value of roi, *param[in] x2 x2 value of roi, *param[in] y2 y2 value of roi,*param[in] OpenCL handle
imgaug1,image_augmentations1,random_crop_letterbox,1,RppPtr_t,srcPtr,RppiSize,srcSize,validate_image_size,RppPtr_t,dstPtr,RppiSize,dstSize,validate_image_size,Rpp32u,x1,validate_int_range,0,srcSize.width - 1,Rpp32u,y1,validate_int_range,0,srcSize.height - 1,Rpp32u,x2,validate_int_range,0,srcSize.width - 1,Rpp32u,y2,validate_int_range,0,srcSize.height - 1,RppHandle_t,rppHandle,/* Crops the roi region, adds border and stores it in destination,*param [in] srcPtr input image,*param[in]  srcSize dimensions of the images,*param[out] dstPtr output image,*param[in] x1 value of roi,*param[in] y1 value of roi, *param[in] x2 value of roi, *param[in]y2 value of roi,*param[in] OpenCL handle
imgaug1,image_augmentations1,occlusion,2,RppPtr_t,srcPtr1,RppiSize,srcSize,validate_image_size,RppPtr_t,srcPtr2,RppiSize,srcSize2,validate_image_size,RppPtr_t,dstPtr,Rpp32u,src1x1,validate_int_range,0,srcSize1.width - 1,Rpp32u,src1y1,validate_int_range,0,srcSize1.height - 1,Rpp32u,src1x2,validate_int_range,0,srcSize1.width - 1,Rpp32u,src1y2,validate_int_range,0,srcSize1.height - 1,Rpp32u,src2x1,validate_int_range,0,srcSize1.width - 1,Rpp32u,src2y1,validate_int_range,0,srcSize1.height - 1,Rpp32u,src2x2,validate_int_range,0,srcSize1.width - 1,Rpp32u,src2y2,validate_int_range,0,srcSize1.height - 1,RppHandle_t,rppHandle,/* Adds occlusion in a region of the first image by taking a crop from a region in the second image ,*param [in] srcPtr1 input image1,*param[in]  srcSize1 dimensions of the first input image,*param [in] srcPtr2 input image2,*param[in]  srcSize2 dimensions of the secong input image,*param[out] dstPtr output image,*param[in] src1x1 value of roi in image1,*param[in] src1y1 value of roi in image1, *param[in] src1x2 value of roi in image1, *param[in] src1y2 value of roi in image1,*param[in] src2x1 value of roi in image2,*param[in] src2y1 value of roi in image2, *param[in] src2x2 value of roi in image2, *param[in] src2y2 value of roi in image2,*param[in] OpenCL handle
imgaug1,image_augmentations1,exposure,1,RppPtr_t,srcPtr,RppiSize,srcSize,validate_image_size,RppPtr_t,dstPtr,Rpp32f,exposureValue,validate_float_range,-4,4,RppHandle_t,rppHandle,/*Changes exposure of an image.,*param [in] srcPtr input image,*param[in]  srcSize dimensions of the images,*param[out] dstPtr output image,*param[in] exposureFactor factor used in exposure correction which should range between -4 - 4,*param[in] OpenCL handle
