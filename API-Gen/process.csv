imgaug1,arithmetic_operations1,accumulate_weighted,2,RppPtr_t,srcPtr1,RppPtr_t,srcPtr2,RppiSize,srcSize,validate_image_size,Rpp64f,alpha,validate_float_range,0,1,RppHandle_t,rppHandle,/* Accumulates a weighted value from  input images and stores it in the first input image.,*param [in/out] input image where the accumulated value will be stored,*param[in] input image,*param[in] dimensions of the images,*param[in] weight float value which should range between 0 - 1,param[in] OpenCL handle
imgaug1,arithmetic_operations1,absolute_difference,2,RppPtr_t,srcPtr1,RppPtr_t,srcPtr2,RppiSize,srcSize,validate_image_size,RppPtr_t,dstPtr,RppHandle_t,rppHandle,/* Computes the absolute difference between two images.,*param [in] input image1,*param[in] input image2 ,*param[in] dimensions of the images,*param[out] output image,param[in] OpenCL handle
imgaug1,arithmetic_operations1,add,2,RppPtr_t,srcPtr1,RppPtr_t,srcPtr2,RppiSize,srcSize,validate_image_size,RppPtr_t,dstPtr,RppHandle_t,rppHandle,/* Computes the addition between two images..,*param [in] input image1,*param[in] input image2 ,*param[in] dimensions of the images,*param[out] output image,param[in] OpenCL handle
imgaug1,arithmetic_operations1,subtract,2,RppPtr_t,srcPtr1,RppPtr_t,srcPtr2,RppiSize,srcSize,validate_image_size,RppPtr_t,dstPtr,RppHandle_t,rppHandle,/* Computes the subtraction between two images..,*param [in] input image1,*param[in] input image2 ,*param[in] dimensions of the images,*param[out] output image,param[in] OpenCL handle
imgaug1,arithmetic_operations1,accumulate,2,RppPtr_t,srcPtr1,RppPtr_t,srcPtr2,RppiSize,srcSize,validate_image_size,RppHandle_t,rppHandle,/* Computes the accumulation between two images..,*param [in] input image1,*param[in] input image2 ,*param[in] dimensions of the images,*param[out] output image,param[in] OpenCL handle
imgaug1,logical_operations1,bitwise_AND,2,RppPtr_t,srcPtr1,RppPtr_t,srcPtr2,RppiSize,srcSize,validate_image_size,RppPtr_t,dstPtr,RppHandle_t,rppHandle,/* Computes the bitwise AND between two images..,*param [in] input image1,*param[in] input image2 ,*param[in] dimensions of the images,*param[out] output image,param[in] OpenCL handle
imgaug1,logical_operations1,bitwise_NOT,1,RppPtr_t,srcPtr,RppiSize,srcSize,validate_image_size,RppPtr_t,dstPtr,RppHandle_t,rppHandle,/* Computes the bitwise_NOT for the given images.,*param [in] input image,*param[in] dimensions of the images,*param[out] output image,param[in] OpenCL handle
imgaug1,logical_operations1,exclusive_OR,2,RppPtr_t,srcPtr1,RppPtr_t,srcPtr2,RppiSize,srcSize,validate_image_size,RppPtr_t,dstPtr,RppHandle_t,rppHandle,/* Computes the bitwise ExOR between two images..,*param [in] input image1,*param[in] input image2 ,*param[in] dimensions of the images,*param[out] output image,param[in] OpenCL handle
imgaug1,logical_operations1,inclusive_OR,2,RppPtr_t,srcPtr1,RppPtr_t,srcPtr2,RppiSize,srcSize,validate_image_size,RppPtr_t,dstPtr,RppHandle_t,rppHandle,/* Computes the bitwise OR between two images..,*param [in] input image1,*param[in] input image2 ,*param[in] dimensions of the images,*param[out] output image,param[in] OpenCL handle
imgaug1,filter_operations1,bilateral_filter,1,RppPtr_t,srcPtr1,RppiSize,srcSize,validate_image_size,RppPtr_t,dstPtr,Rpp32u,filterSize,validate_float_min,0,Rpp64f,sigmaI,validate_float_range,0,20,Rpp64f,sigmaS,validate_float_range,0,20,RppHandle_t,rppHandle,/* Apllies bilateral filtering to the input image.,param [in] input image,*param[in] dimensions of the image,*param[out] output image,*param[in] size of filter which uses the neighbouring pixels value  for filtering.,*param[in] filter sigma value in color space and value should be between 0 and 20,*param[in] filter sigma value in coordinate space and value should be between 0 and 20,param[in] OpenCL handle
imgaug1,image_augmentations1,blur,1,RppPtr_t,srcPtr,RppiSize,srcSize,validate_image_size,RppPtr_t,dstPtr,Rpp32f,stdDev,validate_float_min,0,RppHandle_t,rppHandle,/* Uses Gaussian for blurring the image.,param [in] input image,*param[in] dimensions of the image,*param[out] output image,*param[in] standard deviation value to populate gaussian kernels,param[in] OpenCL handle
imgaug1,image_augmentations1,contrast,1,RppPtr_t,srcPtr,RppiSize,srcSize,validate_image_size,RppPtr_t,dstPtr,Rpp32u,newMin,validate_int_max,newMax,Rpp32u,newMax,RppHandle_t,rppHandle,/* Computes cotrast of the image using contrast stretch technique.,param [in] input image,*param[in] dimensions of the image,*param[out] output image,*param[in] minimum pixel value for contrast stretch,*param[in] maxium pixel value for contrast stretch,param[in] OpenCL handle
imgaug1,image_augmentations1,brightness,1,RppPtr_t,srcPtr,RppiSize,srcSize,validate_image_size,RppPtr_t,dstPtr,Rpp32f,alpha,validate_float_range,0,2,Rpp32f,beta,validate_float_range,0,255,RppHandle_t,rppHandle,/* Computes brightness of an image.,param [in] input image,*param[in] dimensions of the image,*param[out] output image,*param[in] alpha for brightness calculation and value should be between 0 and 20,*param[in] beta value for brightness calculation and value should be between 0 and 255,param[in] OpenCL handle 
imgaug1,image_augmentations1,gamma_correction,1,RppPtr_t,srcPtr,RppiSize,srcSize,validate_image_size,RppPtr_t,dstPtr,Rpp32f,gamma,validate_float_min,0,RppHandle_t,rppHandle,/* Computes gamma correction for an image.,param [in] input image,*param[in] dimensions of the image,*param[out] output image,param[in] gamma value used in gamma correction,param[in] OpenCL handle
imgaug1,color_model_convertions1,rgb_to_hsv,1,RppPtr_t,srcPtr,RppiSize,srcSize,validate_image_size,RppPtr_t,dstPtr,RppHandle_t,rppHandle,/* Converts RGB image to HSV image.,param [in] input image,*param[in] dimensions of the image,*param[out] output image,param[in] OpenCL handle
imgaug1,color_model_convertions1,hsv_to_rgb,1,RppPtr_t,srcPtr,RppiSize,srcSize,validate_image_size,RppPtr_t,dstPtr,RppHandle_t,rppHandle,/* Converts HSV image to RGB image.,param [in] input image,*param[in] dimensions of the image,*param[out] output image,param[in] OpenCL handle
imgaug1,color_model_convertions1,hueRGB,1,RppPtr_t,srcPtr,RppiSize,srcSize,validate_image_size,RppPtr_t,dstPtr,Rpp32f,hueShift,RppHandle_t,rppHandle,/* Computes hue value and updates it in RGB image.,param [in] input image,*param[in] dimensions of the image,*param[out] output image,*param[in] hue shift for hue calculation,param[in] OpenCL handle
imgaug1,color_model_convertions1,hueHSV,1,RppPtr_t,srcPtr,RppiSize,srcSize,validate_image_size,RppPtr_t,dstPtr,Rpp32f,hueShift,RppHandle_t,rppHandle,/* Computes hue value and updates it in HSV image.,param [in] input image,*param[in] dimensions of the image,*param[out] output image,*param[in] hue shift for hue calculation,param[in] OpenCL handle
imgaug1,color_model_convertions1,saturationRGB,1,RppPtr_t,srcPtr,RppiSize,srcSize,validate_image_size,RppPtr_t,dstPtr,Rpp32f,saturationFactor,RppHandle_t,rppHandle,/* Computes saturation value and updates it in RGB image.,param [in] input image,*param[in] dimensions of the image,*param[out] output image,*param[in] saturationFactor for saturation calculation,param[in] OpenCL handle
imgaug1,color_model_convertions1,saturationHSV,1,RppPtr_t,srcPtr,RppiSize,srcSize,validate_image_size,RppPtr_t,dstPtr,Rpp32f,saturationFactor,RppHandle_t,rppHandle,/* Computes saturation value and updates it in HSV image.,param [in] input image,*param[in] dimensions of the image,*param[out] output image,*param[in] saturationFactor for saturation calculation,param[in] OpenCL handle
imgaug1,geometry_transforms1,flip,1,RppPtr_t,srcPtr,RppiSize,srcSize,validate_image_size,RppPtr_t,dstPtr,RppiAxis,flipAxis,validate_int_range,0,2,RppHandle_t,rppHandle,/* flips the image.,param [in] input image,*param[in] dimensions of the image,*param[out] output image,*param[in] flip axis and value should range beetween 0 and 2, 0 ---> horizontal flip, 1 ---> vertical flip,  2 ---> horizontal + vertical flip,param[in] OpenCL handle
imgaug1,geometry_transforms1,resize,1,RppPtr_t,srcPtr,RppiSize,srcSize,validate_image_size,RppPtr_t,dstPtr,RppiSize,dstSize,validate_image_size,RppHandle_t,rppHandle,/* Resizes the input image to the destination dimension.,*param [in] input image,*param[in] dimensions of the images,*param[out] output image where resized image is stored,*param[in] dimensions of the output images,param[in] OpenCL handle
imgaug1,geometry_transforms1,resize_crop,1,RppPtr_t,srcPtr,RppiSize,srcSize,validate_image_size,RppPtr_t,dstPtr,RppiSize,dstSize,validate_image_size,Rpp32u,x1,validate_int_range,0,srcSize.height,Rpp32u,y1,validate_int_range,0,srcSize.width,Rpp32u,x2,validate_int_range,0,srcSize.height,Rpp32u,y2,validate_int_range,0,srcSize.width,RppHandle_t,rppHandle,/* Crops the image to the roi area and resizes to the destination size,*param [in] input image,*param[in] dimensions of the images,*param[out] output image where resized image is stored,*param[in] dimensions of the output images,*param[in] x1 value of roi,*param[in] y1 value of roi, *param[in] x2 value of roi, *param[in]y2 value of roi, param[in] OpenCL handle
imgaug1,geometry_transforms1,rotate,1,RppPtr_t,srcPtr,RppiSize,srcSize,validate_image_size,RppPtr_t,dstPtr,RppiSize,dstSize,Rpp32f,angleDeg,RppHandle_t,rppHandle,/* Rotates the input image to the ngle specified,*param [in] input image,*param[in] dimensions of the input images,*param[out] output image where rotated image is stored,*param[in] dimensions of the output images,*param[in] angle for rotation, param[in] OpenCL handle
